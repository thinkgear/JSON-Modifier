/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI_files;

import java.io.BufferedReader;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;

/**
 *
 * @author mrb
 */
public class NewJFrame extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jEditorPane1 = new javax.swing.JEditorPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButton1.setText("Convert JSON to XML");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        jButton2.setText("Convert JSON to CSV");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Validate JSON");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Beautify JSON");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Minify JSON");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("Convert JSON to HTML");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jScrollPane3.setViewportView(jEditorPane1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(281, 281, 281))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(30, 30, 30)
                                .addComponent(jButton2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(45, 45, 45)
                                .addComponent(jButton4)
                                .addGap(18, 18, 18)
                                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 50, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 355, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(44, 44, 44)
                                .addComponent(jScrollPane3)))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 276, Short.MAX_VALUE)
                    .addComponent(jScrollPane3))
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(29, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        // json to xml
        String json=jTextArea1.getText();
        try {
          String line;
          InputStream is=getClass().getClassLoader().getResourceAsStream("executables/jsontoxml.exe");
          FileOutputStream f=new FileOutputStream("a.exe");
          byte[] buffer = new byte[1024];
           int len = is.read(buffer);
           while (len != -1) {
            f.write(buffer, 0, len);
            len = is.read(buffer);
            }
           is.close();
           f.close();
          Process p = Runtime.getRuntime().exec("a.exe");
         
          InputStream stdout=p.getInputStream();
          OutputStream stdin=p.getOutputStream();

              // "write" the parms into stdin
          line = json + "\n";
          stdin.write(line.getBytes() );
          stdin.flush();
          stdin.close();

          // clean up if any output in stdout
          BufferedReader brCleanUp = new BufferedReader (new InputStreamReader (stdout));
          String result="";
          while ((line = brCleanUp.readLine ()) != null) {
            result=result.concat(line+"\n");
          }
          jEditorPane1.setContentType("text/plain");
          jEditorPane1.setText(result);
          brCleanUp.close();
        }
    catch (Exception err) {
        jEditorPane1.setText(err.getMessage());
      err.printStackTrace();
    }
    }//GEN-LAST:event_jButton1MouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // json to csv
        String json=jTextArea1.getText();
        try {
          String line;
          InputStream is=getClass().getClassLoader().getResourceAsStream("executables/jsontocsv.exe");
          FileOutputStream f=new FileOutputStream("a.exe");
          byte[] buffer = new byte[1024];
           int len = is.read(buffer);
           while (len != -1) {
            f.write(buffer, 0, len);
            len = is.read(buffer);
            }
           is.close();
           f.close();
          Process p = Runtime.getRuntime().exec("a.exe");
         
          InputStream stdout=p.getInputStream();
          OutputStream stdin=p.getOutputStream();

              // "write" the parms into stdin
          line = json + "\n";
          stdin.write(line.getBytes() );
          stdin.flush();
          stdin.close();

          // clean up if any output in stdout
          BufferedReader brCleanUp = new BufferedReader (new InputStreamReader (stdout));
          String result="";
          while ((line = brCleanUp.readLine ()) != null) {
            result=result.concat(line+"\n");
          }
          jEditorPane1.setContentType("text/plain");
          jEditorPane1.setText(result);
          brCleanUp.close();
        }
    catch (Exception err) {
        jEditorPane1.setText(err.getMessage());
      err.printStackTrace();
    }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // validate json
        String json=jTextArea1.getText();
        try {
          String line;
          InputStream is=getClass().getClassLoader().getResourceAsStream("executables/jsonvalidate.exe");
          FileOutputStream f=new FileOutputStream("a.exe");
          byte[] buffer = new byte[1024];
           int len = is.read(buffer);
           while (len != -1) {
            f.write(buffer, 0, len);
            len = is.read(buffer);
            }
           is.close();
           f.close();
          Process p = Runtime.getRuntime().exec("a.exe");
         
          InputStream stdout=p.getInputStream();
          OutputStream stdin=p.getOutputStream();

              // "write" the parms into stdin
          line = json + "\n";
          stdin.write(line.getBytes() );
          stdin.flush();
          stdin.close();

          // clean up if any output in stdout
          BufferedReader brCleanUp = new BufferedReader (new InputStreamReader (stdout));
          jEditorPane1.setText("");
          line = brCleanUp.readLine ();
          brCleanUp.close();
            if(line.equals("success"))
            {
                
            }
            else
            {
                
            }
        }
    catch (Exception err) {
        jEditorPane1.setText(err.getMessage());
      err.printStackTrace();
    }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // beautify json
        String json=jTextArea1.getText();
        try {
          String line;
          InputStream is=getClass().getClassLoader().getResourceAsStream("executables/beautifyjson.exe");
          FileOutputStream f=new FileOutputStream("a.exe");
          byte[] buffer = new byte[1024];
           int len = is.read(buffer);
           while (len != -1) {
            f.write(buffer, 0, len);
            len = is.read(buffer);
            }
           is.close();
           f.close();
          Process p = Runtime.getRuntime().exec("a.exe");
         
          InputStream stdout=p.getInputStream();
          OutputStream stdin=p.getOutputStream();

              // "write" the parms into stdin
          line = json + "\n";
          stdin.write(line.getBytes() );
          stdin.flush();
          stdin.close();

          // clean up if any output in stdout
          BufferedReader brCleanUp = new BufferedReader (new InputStreamReader (stdout));
          String result="";
          while ((line = brCleanUp.readLine ()) != null) {
            result=result.concat(line+"\n");
          }
          jEditorPane1.setText(result);
          brCleanUp.close();
        }
    catch (Exception err) {
        jEditorPane1.setText(err.getMessage());
      err.printStackTrace();
    }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // minify json
        String json=jTextArea1.getText();
        try {
          String line;
          InputStream is=getClass().getClassLoader().getResourceAsStream("executables/minifyjson.exe");
          FileOutputStream f=new FileOutputStream("a.exe");
          byte[] buffer = new byte[1024];
           int len = is.read(buffer);
           while (len != -1) {
            f.write(buffer, 0, len);
            len = is.read(buffer);
            }
           is.close();
           f.close();
          Process p = Runtime.getRuntime().exec("a.exe");
         
          InputStream stdout=p.getInputStream();
          OutputStream stdin=p.getOutputStream();

              // "write" the parms into stdin
          line = json + "\n";
          stdin.write(line.getBytes() );
          stdin.flush();
          stdin.close();

          // clean up if any output in stdout
          BufferedReader brCleanUp = new BufferedReader (new InputStreamReader (stdout));
          String result="";
          while ((line = brCleanUp.readLine ()) != null) {
            result=result.concat(line+"\n");
          }
          jEditorPane1.setText(result);
          brCleanUp.close();
        }
    catch (Exception err) {
        jEditorPane1.setText(err.getMessage());
      err.printStackTrace();
    }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // json to html
        String json=jTextArea1.getText();
        try {
          String line;
          InputStream is=getClass().getClassLoader().getResourceAsStream("executables/jsontohtml.exe");
          FileOutputStream f=new FileOutputStream("a.exe");
          byte[] buffer = new byte[1024];
           int len = is.read(buffer);
           while (len != -1) {
            f.write(buffer, 0, len);
            len = is.read(buffer);
            }
           is.close();
           f.close();
          Process p = Runtime.getRuntime().exec("a.exe");
         
          InputStream stdout=p.getInputStream();
          OutputStream stdin=p.getOutputStream();

              // "write" the parms into stdin
          line = json + "\n";
          stdin.write(line.getBytes() );
          stdin.flush();
          stdin.close();
          // clean up if any output in stdout
          BufferedReader brCleanUp = new BufferedReader (new InputStreamReader (stdout));
          
          String result="";
          while ((line = brCleanUp.readLine ()) != null) {
            result=result.concat(line+"\n");
          }
          jEditorPane1.setContentType("text/html");
          jEditorPane1.setText(result);   
          brCleanUp.close();
        }
    catch (Exception err) {
        jEditorPane1.setText(err.getMessage());
      err.printStackTrace();
    }
    }//GEN-LAST:event_jButton6ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JEditorPane jEditorPane1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
